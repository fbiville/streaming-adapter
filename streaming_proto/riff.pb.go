// Code generated by protoc-gen-go. DO NOT EDIT.
// source: riff.proto

package streaming_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Start struct {
	Accept               string   `protobuf:"bytes,1,opt,name=accept,proto3" json:"accept,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Start) Reset()         { *m = Start{} }
func (m *Start) String() string { return proto.CompactTextString(m) }
func (*Start) ProtoMessage()    {}
func (*Start) Descriptor() ([]byte, []int) {
	return fileDescriptor_riff_24c786f71295e962, []int{0}
}
func (m *Start) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Start.Unmarshal(m, b)
}
func (m *Start) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Start.Marshal(b, m, deterministic)
}
func (dst *Start) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Start.Merge(dst, src)
}
func (m *Start) XXX_Size() int {
	return xxx_messageInfo_Start.Size(m)
}
func (m *Start) XXX_DiscardUnknown() {
	xxx_messageInfo_Start.DiscardUnknown(m)
}

var xxx_messageInfo_Start proto.InternalMessageInfo

func (m *Start) GetAccept() string {
	if m != nil {
		return m.Accept
	}
	return ""
}

type Next struct {
	Payload              []byte            `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Headers              map[string]string `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Next) Reset()         { *m = Next{} }
func (m *Next) String() string { return proto.CompactTextString(m) }
func (*Next) ProtoMessage()    {}
func (*Next) Descriptor() ([]byte, []int) {
	return fileDescriptor_riff_24c786f71295e962, []int{1}
}
func (m *Next) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Next.Unmarshal(m, b)
}
func (m *Next) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Next.Marshal(b, m, deterministic)
}
func (dst *Next) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Next.Merge(dst, src)
}
func (m *Next) XXX_Size() int {
	return xxx_messageInfo_Next.Size(m)
}
func (m *Next) XXX_DiscardUnknown() {
	xxx_messageInfo_Next.DiscardUnknown(m)
}

var xxx_messageInfo_Next proto.InternalMessageInfo

func (m *Next) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Next) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

type Signal struct {
	// Types that are valid to be assigned to Value:
	//	*Signal_Start
	//	*Signal_Next
	Value                isSignal_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Signal) Reset()         { *m = Signal{} }
func (m *Signal) String() string { return proto.CompactTextString(m) }
func (*Signal) ProtoMessage()    {}
func (*Signal) Descriptor() ([]byte, []int) {
	return fileDescriptor_riff_24c786f71295e962, []int{2}
}
func (m *Signal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Signal.Unmarshal(m, b)
}
func (m *Signal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Signal.Marshal(b, m, deterministic)
}
func (dst *Signal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signal.Merge(dst, src)
}
func (m *Signal) XXX_Size() int {
	return xxx_messageInfo_Signal.Size(m)
}
func (m *Signal) XXX_DiscardUnknown() {
	xxx_messageInfo_Signal.DiscardUnknown(m)
}

var xxx_messageInfo_Signal proto.InternalMessageInfo

type isSignal_Value interface {
	isSignal_Value()
}

type Signal_Start struct {
	Start *Start `protobuf:"bytes,1,opt,name=start,proto3,oneof"`
}

type Signal_Next struct {
	Next *Next `protobuf:"bytes,2,opt,name=next,proto3,oneof"`
}

func (*Signal_Start) isSignal_Value() {}

func (*Signal_Next) isSignal_Value() {}

func (m *Signal) GetValue() isSignal_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Signal) GetStart() *Start {
	if x, ok := m.GetValue().(*Signal_Start); ok {
		return x.Start
	}
	return nil
}

func (m *Signal) GetNext() *Next {
	if x, ok := m.GetValue().(*Signal_Next); ok {
		return x.Next
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Signal) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Signal_OneofMarshaler, _Signal_OneofUnmarshaler, _Signal_OneofSizer, []interface{}{
		(*Signal_Start)(nil),
		(*Signal_Next)(nil),
	}
}

func _Signal_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Signal)
	// value
	switch x := m.Value.(type) {
	case *Signal_Start:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Start); err != nil {
			return err
		}
	case *Signal_Next:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Next); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Signal.Value has unexpected type %T", x)
	}
	return nil
}

func _Signal_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Signal)
	switch tag {
	case 1: // value.start
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Start)
		err := b.DecodeMessage(msg)
		m.Value = &Signal_Start{msg}
		return true, err
	case 2: // value.next
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Next)
		err := b.DecodeMessage(msg)
		m.Value = &Signal_Next{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Signal_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Signal)
	// value
	switch x := m.Value.(type) {
	case *Signal_Start:
		s := proto.Size(x.Start)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Signal_Next:
		s := proto.Size(x.Next)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Start)(nil), "streaming_proto.Start")
	proto.RegisterType((*Next)(nil), "streaming_proto.Next")
	proto.RegisterMapType((map[string]string)(nil), "streaming_proto.Next.HeadersEntry")
	proto.RegisterType((*Signal)(nil), "streaming_proto.Signal")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RiffClient is the client API for Riff service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RiffClient interface {
	Invoke(ctx context.Context, opts ...grpc.CallOption) (Riff_InvokeClient, error)
}

type riffClient struct {
	cc *grpc.ClientConn
}

func NewRiffClient(cc *grpc.ClientConn) RiffClient {
	return &riffClient{cc}
}

func (c *riffClient) Invoke(ctx context.Context, opts ...grpc.CallOption) (Riff_InvokeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Riff_serviceDesc.Streams[0], "/streaming_proto.Riff/Invoke", opts...)
	if err != nil {
		return nil, err
	}
	x := &riffInvokeClient{stream}
	return x, nil
}

type Riff_InvokeClient interface {
	Send(*Signal) error
	Recv() (*Signal, error)
	grpc.ClientStream
}

type riffInvokeClient struct {
	grpc.ClientStream
}

func (x *riffInvokeClient) Send(m *Signal) error {
	return x.ClientStream.SendMsg(m)
}

func (x *riffInvokeClient) Recv() (*Signal, error) {
	m := new(Signal)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RiffServer is the server API for Riff service.
type RiffServer interface {
	Invoke(Riff_InvokeServer) error
}

func RegisterRiffServer(s *grpc.Server, srv RiffServer) {
	s.RegisterService(&_Riff_serviceDesc, srv)
}

func _Riff_Invoke_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RiffServer).Invoke(&riffInvokeServer{stream})
}

type Riff_InvokeServer interface {
	Send(*Signal) error
	Recv() (*Signal, error)
	grpc.ServerStream
}

type riffInvokeServer struct {
	grpc.ServerStream
}

func (x *riffInvokeServer) Send(m *Signal) error {
	return x.ServerStream.SendMsg(m)
}

func (x *riffInvokeServer) Recv() (*Signal, error) {
	m := new(Signal)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Riff_serviceDesc = grpc.ServiceDesc{
	ServiceName: "streaming_proto.Riff",
	HandlerType: (*RiffServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Invoke",
			Handler:       _Riff_Invoke_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "riff.proto",
}

func init() { proto.RegisterFile("riff.proto", fileDescriptor_riff_24c786f71295e962) }

var fileDescriptor_riff_24c786f71295e962 = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x8f, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0xb3, 0x69, 0xfe, 0xe0, 0xa4, 0xa0, 0x0c, 0x5a, 0x43, 0x2f, 0x96, 0x3d, 0x05, 0x84,
	0x45, 0xe2, 0x45, 0x8a, 0x07, 0x11, 0x84, 0x78, 0xf1, 0xb0, 0x7d, 0x00, 0x59, 0xdb, 0x4d, 0x0d,
	0x8d, 0x9b, 0xb0, 0x59, 0x4b, 0xf3, 0x2a, 0x3e, 0xad, 0x64, 0x93, 0x82, 0x18, 0xbd, 0xcd, 0xf7,
	0xcd, 0x37, 0x33, 0xbf, 0x01, 0xd0, 0x45, 0x9e, 0xb3, 0x5a, 0x57, 0xa6, 0xc2, 0xd3, 0xc6, 0x68,
	0x29, 0x3e, 0x0a, 0xb5, 0x7d, 0xb5, 0x06, 0xbd, 0x02, 0x7f, 0x65, 0x84, 0x36, 0x38, 0x83, 0x40,
	0xac, 0xd7, 0xb2, 0x36, 0x31, 0x59, 0x90, 0xe4, 0x84, 0x0f, 0x8a, 0x7e, 0x11, 0xf0, 0x5e, 0xe4,
	0xc1, 0x60, 0x0c, 0x61, 0x2d, 0xda, 0xb2, 0x12, 0x1b, 0x9b, 0x98, 0xf2, 0xa3, 0xc4, 0x7b, 0x08,
	0xdf, 0xa5, 0xd8, 0x48, 0xdd, 0xc4, 0xee, 0x62, 0x92, 0x44, 0x29, 0x65, 0xbf, 0xce, 0xb0, 0x6e,
	0x03, 0xcb, 0xfa, 0xd0, 0x93, 0x32, 0xba, 0xe5, 0xc7, 0x91, 0xf9, 0x12, 0xa6, 0x3f, 0x1b, 0x78,
	0x06, 0x93, 0x9d, 0x6c, 0x07, 0x8a, 0xae, 0xc4, 0x73, 0xf0, 0xf7, 0xa2, 0xfc, 0x94, 0xb1, 0x6b,
	0xbd, 0x5e, 0x2c, 0xdd, 0x3b, 0x42, 0x15, 0x04, 0xab, 0x62, 0xab, 0x44, 0x89, 0x0c, 0xfc, 0xa6,
	0xfb, 0xc3, 0xce, 0x45, 0xe9, 0x6c, 0x44, 0x60, 0xbf, 0xcc, 0x1c, 0xde, 0xc7, 0xf0, 0x1a, 0x3c,
	0x25, 0x0f, 0xc6, 0xae, 0x8c, 0xd2, 0x8b, 0x3f, 0x81, 0x33, 0x87, 0xdb, 0xd0, 0x63, 0x38, 0x00,
	0xa4, 0x19, 0x78, 0xbc, 0xc8, 0x73, 0x7c, 0x80, 0xe0, 0x59, 0xed, 0xab, 0x9d, 0xc4, 0xcb, 0xf1,
	0x21, 0x0b, 0x34, 0xff, 0xaf, 0x41, 0x9d, 0x84, 0xdc, 0x90, 0xb7, 0xc0, 0x7a, 0xb7, 0xdf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xec, 0xa9, 0x7f, 0xb2, 0x9d, 0x01, 0x00, 0x00,
}
